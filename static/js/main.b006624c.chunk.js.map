{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","currentImage","setCurrentImage","maxImages","length","carouselWidth","imageTranslate","isDisabledPrevHandle","isDisabledNextHandle","className","style","width","transition","map","image","index","transform","src","alt","type","onClick","disabled","App","useState","stepsCount","setStepsCount","setFrameSize","setItemWidth","setAnimationDuration","isInfinite","setIsInfinite","htmlFor","id","min","max","value","onChange","event","target","newFrameSize","parseInt","Math","ReactDOM","render","document","getElementById"],"mappings":"mMAmGeA,EArFmB,SAAC,GAS5B,IARLC,EAQI,EARJA,OACAC,EAOI,EAPJA,KACAC,EAMI,EANJA,UACAC,EAKI,EALJA,UACAC,EAII,EAJJA,kBACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,aACAC,EACI,EADJA,gBAEMC,EAAYR,EAAOS,OAASP,EAC5BQ,EAAgBR,EAAYC,EAC5BQ,EAAiBL,EAAeH,EAgBtC,IAAMS,EAAwC,IAAjBN,IAAuBD,EAC9CQ,EAAuBP,IAAiBE,IAAcH,EAE5D,OACE,sBACES,UAAU,WACVC,MAAO,CACLC,MAAM,GAAD,OAAKN,EAAL,MACLO,WAAW,GAAD,OAAKb,EAAL,OAJd,UAOE,oBAAIU,UAAU,iBAAd,SACGd,EAAOkB,KAAI,SAACC,EAAOC,GAAR,OACV,oBACEN,UAAU,kBAEVC,MAAO,CACLM,UAAU,cAAD,QAAiBV,EAAjB,OACTM,WAAW,aAAD,OAAeb,EAAf,YALd,SAQE,qBAAKkB,IAAKH,EAAOI,IAAG,UAAKH,EAAQ,GAAKJ,MAAOb,KANxCgB,QAWX,sBAAKL,UAAU,oBAAf,UACE,wBACEU,KAAK,SACLV,UACEF,EACI,8CACA,4CAENa,QAhDR,WACE,OACIlB,EADoB,IAAjBD,EACaA,EAAeL,GAAQ,EAAIK,EAAeL,EAAO,EACjDO,IA8CdkB,SAAUd,EARZ,oBAYA,wBACEY,KAAK,SACLV,UACED,EACI,8CACA,4CAEN,UAAQ,OACRY,QAvDR,WACE,OACIlB,EADGD,IAAiBE,EAEpBF,EAAeL,GAAQO,EAAYF,EAAeL,EAAOO,EAEzC,IAmDdkB,SAAUb,EATZ,2BCxEFb,EAAS,CACb,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,gBA4Ga2B,EAzGO,WACpB,MAAoCC,mBAnBV,GAmB1B,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAkCF,mBAnBT,GAmBzB,mBAAO1B,EAAP,KAAkB6B,EAAlB,KACA,EAAkCH,mBAnBT,KAmBzB,mBAAOzB,EAAP,KAAkB6B,EAAlB,KACA,EAAkDJ,mBAnB1B,KAmBxB,mBAAOxB,EAAP,KAA0B6B,EAA1B,KACA,EAAoCL,oBAAS,GAA7C,mBAAOM,EAAP,KAAmBC,EAAnB,KACA,EAAwCP,mBAAS,GAAjD,mBAAOtB,EAAP,KAAqBC,EAArB,KAEA,OACE,sBAAKO,UAAU,MAAf,UACE,oBAAI,UAAQ,QAAZ,iCAAsCd,EAAOS,OAA7C,aACA,sBAAKK,UAAU,cAAf,UACE,wBAAOsB,QAAQ,SAAf,UACG,eACD,uBACEtB,UAAU,QACVU,KAAK,SACLa,GAAG,SACHC,IAAK,GACLC,IAAK,IACLtC,KAAM,GACNuC,MAAOrC,EACPsC,SAAU,SAACC,GACTV,GAAcU,EAAMC,OAAOH,aAKjC,wBAAOJ,QAAQ,UAAf,UACG,eACD,uBACEtB,UAAU,QACVU,KAAK,SACLa,GAAG,UACHC,IAAK,EACLC,IAAKvC,EAAOS,OACZR,KAAM,EACNuC,MAAOtC,EACPuC,SAAU,SAACC,GACT,IAAME,EAAeC,SAASH,EAAMC,OAAOH,MAAO,IAE9ClC,EAAesC,EAAe5C,EAAOS,QACvCF,EAAgBuC,KAAKP,IAAI,EAAGvC,EAAOS,OAASmC,IAG9Cb,EAAaa,SAKnB,wBAAOR,QAAQ,SAAf,UACG,SACD,uBACEtB,UAAU,QACVU,KAAK,SACLa,GAAG,SACHC,IAAK,EACLC,IAAKrC,EACLsC,MAAOX,EACPY,SAAU,SAACC,GACTZ,GAAeY,EAAMC,OAAOH,aAKlC,wBAAOJ,QAAQ,cAAf,UACG,uBACD,uBACEtB,UAAU,QACVU,KAAK,SACLa,GAAG,cACHC,IAAK,EACLC,IAAK,IACLtC,KAAM,IACNuC,MAAOpC,EACPqC,SAAU,SAACC,GACTT,GAAsBS,EAAMC,OAAOH,aAKzC,wBAAOJ,QAAQ,WAAf,sBAEE,uBACEZ,KAAK,WACLa,GAAG,WACHI,SAAU,kBAAMN,GAAeD,YAKrC,cAAC,EAAD,CACElC,OAAQA,EACRC,KAAM4B,EACN3B,UAAWA,EACXC,UAAWA,EACXC,kBAAmBA,EACnBC,SAAU6B,EACV5B,aAAcA,EACdC,gBAAiBA,QCtHzBwC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.b006624c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Carousel.scss\";\n\ntype Props = {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n  currentImage: number;\n  setCurrentImage: (value: number) => void;\n};\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n  currentImage,\n  setCurrentImage,\n}) => {\n  const maxImages = images.length - frameSize;\n  const carouselWidth = frameSize * itemWidth;\n  const imageTranslate = currentImage * itemWidth;\n\n  function handlePrev() {\n    return currentImage !== 0\n      ? setCurrentImage(currentImage - step >= 0 ? currentImage - step : 0)\n      : setCurrentImage(maxImages);\n  }\n\n  function handleNext() {\n    return currentImage !== maxImages\n      ? setCurrentImage(\n        currentImage + step <= maxImages ? currentImage + step : maxImages,\n      )\n      : setCurrentImage(0);\n  }\n\n  const isDisabledPrevHandle = currentImage === 0 && !infinite;\n  const isDisabledNextHandle = currentImage === maxImages && !infinite;\n\n  return (\n    <div\n      className=\"carousel\"\n      style={{\n        width: `${carouselWidth}px`,\n        transition: `${animationDuration}ms`,\n      }}\n    >\n      <ul className=\"carousel__list\">\n        {images.map((image, index) => (\n          <li\n            className=\"carousel__image\"\n            key={image}\n            style={{\n              transform: `translateX(${-imageTranslate}px)`,\n              transition: `transform ${animationDuration}ms ease`,\n            }}\n          >\n            <img src={image} alt={`${index + 1}`} width={itemWidth} />\n          </li>\n        ))}\n      </ul>\n\n      <div className=\"carousel__buttons\">\n        <button\n          type=\"button\"\n          className={\n            isDisabledPrevHandle\n              ? \"carousel__button carousel__button--disabled\"\n              : \"carousel__button carousel__button--active\"\n          }\n          onClick={handlePrev}\n          disabled={isDisabledPrevHandle}\n        >\n          &larr;\n        </button>\n        <button\n          type=\"button\"\n          className={\n            isDisabledNextHandle\n              ? \"carousel__button carousel__button--disabled\"\n              : \"carousel__button carousel__button--active\"\n          }\n          data-cy=\"next\"\n          onClick={handleNext}\n          disabled={isDisabledNextHandle}\n        >\n          &rarr;\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React, { useState } from \"react\";\nimport \"./App.scss\";\nimport Carousel from \"./components/Carousel\";\n\nconst DEFAULT_STEPS_COUNT = 3;\nconst DEFAULT_FRAME_SIZE = 3;\nconst DEFAULT_ITEM_WIDTH = 130;\nconst DEFAULT_ANIMATION = 1000;\n\nconst images = [\n  \"./img/1.png\",\n  \"./img/2.png\",\n  \"./img/3.png\",\n  \"./img/4.png\",\n  \"./img/5.png\",\n  \"./img/6.png\",\n  \"./img/7.png\",\n  \"./img/8.png\",\n  \"./img/9.png\",\n  \"./img/10.png\",\n];\n\nconst App: React.FC = () => {\n  const [stepsCount, setStepsCount] = useState(DEFAULT_STEPS_COUNT);\n  const [frameSize, setFrameSize] = useState(DEFAULT_FRAME_SIZE);\n  const [itemWidth, setItemWidth] = useState(DEFAULT_ITEM_WIDTH);\n  const [animationDuration, setAnimationDuration] = useState(DEFAULT_ANIMATION);\n  const [isInfinite, setIsInfinite] = useState(false);\n  const [currentImage, setCurrentImage] = useState(0);\n\n  return (\n    <div className=\"app\">\n      <h1 data-cy=\"title\">{`Carousel with ${images.length} images`}</h1>\n      <div className=\"app__fields\">\n        <label htmlFor=\"itemId\">\n          {\"Item Width: \"}\n          <input\n            className=\"input\"\n            type=\"number\"\n            id=\"itemId\"\n            min={70}\n            max={260}\n            step={10}\n            value={itemWidth}\n            onChange={(event) => {\n              setItemWidth(+event.target.value);\n            }}\n          />\n        </label>\n\n        <label htmlFor=\"frameId\">\n          {\"Frame Size: \"}\n          <input\n            className=\"input\"\n            type=\"number\"\n            id=\"frameId\"\n            min={1}\n            max={images.length}\n            step={1}\n            value={frameSize}\n            onChange={(event) => {\n              const newFrameSize = parseInt(event.target.value, 10);\n\n              if (currentImage + newFrameSize > images.length) {\n                setCurrentImage(Math.max(0, images.length - newFrameSize));\n              }\n\n              setFrameSize(newFrameSize);\n            }}\n          />\n        </label>\n\n        <label htmlFor=\"stepId\">\n          {\"Step: \"}\n          <input\n            className=\"input\"\n            type=\"number\"\n            id=\"stepId\"\n            min={1}\n            max={frameSize}\n            value={stepsCount}\n            onChange={(event) => {\n              setStepsCount(+event.target.value);\n            }}\n          />\n        </label>\n\n        <label htmlFor=\"animationId\">\n          {\"Animation duration: \"}\n          <input\n            className=\"input\"\n            type=\"number\"\n            id=\"animationId\"\n            min={0}\n            max={3000}\n            step={500}\n            value={animationDuration}\n            onChange={(event) => {\n              setAnimationDuration(+event.target.value);\n            }}\n          />\n        </label>\n\n        <label htmlFor=\"infinite\">\n          Infinite:\n          <input\n            type=\"checkbox\"\n            id=\"infinite\"\n            onChange={() => setIsInfinite(!isInfinite)}\n          />\n        </label>\n      </div>\n\n      <Carousel\n        images={images}\n        step={stepsCount}\n        frameSize={frameSize}\n        itemWidth={itemWidth}\n        animationDuration={animationDuration}\n        infinite={isInfinite}\n        currentImage={currentImage}\n        setCurrentImage={setCurrentImage}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}